// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package emf

import "fmt"
import "encoding/json"

type Emf struct {
	// AWS corresponds to the JSON schema field "_aws".
	AWS EmfAWS `json:"_aws"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EmfAWSCloudWatchMetricsElemMetricsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["Name"]; !ok || v == nil {
		return fmt.Errorf("field Name: required")
	}
	if v, ok := raw["Unit"]; !ok || v == nil {
		return fmt.Errorf("field Unit: required")
	}
	type Plain EmfAWSCloudWatchMetricsElemMetricsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = EmfAWSCloudWatchMetricsElemMetricsElem(plain)
	return nil
}

type EmfAWSCloudWatchMetricsElem struct {
	// Dimensions corresponds to the JSON schema field "Dimensions".
	Dimensions [][]string `json:"Dimensions"`

	// Metrics corresponds to the JSON schema field "Metrics".
	Metrics []EmfAWSCloudWatchMetricsElemMetricsElem `json:"Metrics"`

	// Namespace corresponds to the JSON schema field "Namespace".
	Namespace string `json:"Namespace"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EmfAWSCloudWatchMetricsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["Dimensions"]; !ok || v == nil {
		return fmt.Errorf("field Dimensions: required")
	}
	if v, ok := raw["Metrics"]; !ok || v == nil {
		return fmt.Errorf("field Metrics: required")
	}
	if v, ok := raw["Namespace"]; !ok || v == nil {
		return fmt.Errorf("field Namespace: required")
	}
	type Plain EmfAWSCloudWatchMetricsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = EmfAWSCloudWatchMetricsElem(plain)
	return nil
}

type EmfAWS struct {
	// CloudWatchMetrics corresponds to the JSON schema field "CloudWatchMetrics".
	CloudWatchMetrics []EmfAWSCloudWatchMetricsElem `json:"CloudWatchMetrics"`

	// Timestamp corresponds to the JSON schema field "Timestamp".
	Timestamp int `json:"Timestamp"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EmfAWS) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["CloudWatchMetrics"]; !ok || v == nil {
		return fmt.Errorf("field CloudWatchMetrics: required")
	}
	if v, ok := raw["Timestamp"]; !ok || v == nil {
		return fmt.Errorf("field Timestamp: required")
	}
	type Plain EmfAWS
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = EmfAWS(plain)
	return nil
}

type EmfAWSCloudWatchMetricsElemMetricsElem struct {
	// Name corresponds to the JSON schema field "Name".
	Name string `json:"Name"`

	// Unit corresponds to the JSON schema field "Unit".
	Unit string `json:"Unit"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Emf) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["_aws"]; !ok || v == nil {
		return fmt.Errorf("field _aws: required")
	}
	type Plain Emf
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Emf(plain)
	return nil
}
